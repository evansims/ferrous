user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml application/atom+xml image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_status 429;

    # Upstream configuration
    upstream estuary_backend {
        least_conn;

        # Docker Swarm service discovery
        server estuary:3000 max_fails=3 fail_timeout=30s;

        # Or use static servers
        # server estuary1:3000 max_fails=3 fail_timeout=30s;
        # server estuary2:3000 max_fails=3 fail_timeout=30s;
        # server estuary3:3000 max_fails=3 fail_timeout=30s;

        keepalive 32;
    }

    # HTTP server - redirect to HTTPS in production
    server {
        listen 80;
        server_name _;

        # Health check endpoint for load balancer
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # In production, redirect to HTTPS
        # return 301 https://$server_name$request_uri;

        # For development/testing, proxy to backend
        location / {
            proxy_pass http://estuary_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Rate limiting
            limit_req zone=api_limit burst=20 nodelay;

            # CORS headers (if not handled by the application)
            # add_header 'Access-Control-Allow-Origin' '*';
            # add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            # add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-API-Version';
        }

        # Health check endpoints - no rate limiting
        location ~ ^/health/(live|ready)$ {
            proxy_pass http://estuary_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            access_log off;
        }

        # Metrics endpoint - restrict access
        location /metrics {
            # Allow only from monitoring network
            # allow 10.0.0.0/8;
            # deny all;

            proxy_pass http://estuary_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }
    }

    # HTTPS server (uncomment for production)
    # server {
    #     listen 443 ssl http2;
    #     server_name api.yourdomain.com;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #     ssl_prefer_server_ciphers on;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #
    #     # Security headers
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    #     add_header X-Frame-Options DENY always;
    #     add_header X-Content-Type-Options nosniff always;
    #     add_header X-XSS-Protection "1; mode=block" always;
    #
    #     location / {
    #         proxy_pass http://estuary_backend;
    #         # ... same proxy configuration as above
    #     }
    # }
}
