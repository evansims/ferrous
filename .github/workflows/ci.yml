name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Main test job - respects rust-toolchain.toml
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      # This action properly respects rust-toolchain.toml
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          # Explicitly use minimal profile to match rust-toolchain.toml
          rustflags: "-D warnings"

      - name: Show Rust version
        run: |
          echo "Rust toolchain:"
          rustc --version
          cargo --version
          cargo fmt --version
          cargo clippy --version

      # Run exactly the same checks as make ci-local
      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Build
        run: cargo build --verbose

      - name: Build release
        run: cargo build --release --verbose

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      # Install cargo-audit if not cached
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Run cargo audit
        run: cargo audit

      # Check for common security issues
      - name: Security lints
        run: |
          echo "::group::Checking for hardcoded secrets"
          # Check for potential secrets in code
          # More comprehensive patterns for detecting secrets
          PATTERNS=(
            # API keys and tokens
            "(api[_-]?key|apikey|access[_-]?token|auth[_-]?token)\s*[:=]\s*[\"'][0-9a-zA-Z]{16,}[\"']"
            # Passwords
            "(password|passwd|pwd)\s*[:=]\s*[\"'][^\"']{8,}[\"']"
            # Private keys
            "-----BEGIN (RSA |EC |DSA |OPENSSH )?PRIVATE KEY-----"
            # AWS keys
            "AKIA[0-9A-Z]{16}"
            # Generic secrets
            "(secret|private[_-]?key)\s*[:=]\s*[\"'][^\"']{8,}[\"']"
          )
          
          FOUND=0
          for pattern in "${PATTERNS[@]}"; do
            if grep -r -i -E "$pattern" src/ --include="*.rs" 2>/dev/null; then
              echo "❌ Found potential hardcoded secrets matching pattern: $pattern"
              FOUND=1
            fi
          done
          
          if [ $FOUND -eq 1 ]; then
            echo "Please use environment variables for sensitive data"
            exit 1
          else
            echo "✅ No hardcoded secrets found"
          fi
          echo "::endgroup::"

          echo "::group::Checking for unsafe code"
          # Check for unsafe code blocks
          UNSAFE_COUNT=$(grep -r "unsafe" src/ --include="*.rs" | grep -v "// SAFETY:" | wc -l | tr -d ' ')
          if [ "$UNSAFE_COUNT" -gt 0 ]; then
            echo "⚠️  Found $UNSAFE_COUNT unsafe code blocks without SAFETY comments"
            echo "All unsafe blocks should have a // SAFETY: comment explaining why they're necessary"
            grep -r -n "unsafe" src/ --include="*.rs" | grep -v "// SAFETY:"
          else
            echo "✅ No undocumented unsafe code found"
          fi
          echo "::endgroup::"

      # Additional security checks with cargo
      - name: Check dependencies for known vulnerabilities
        run: |
          echo "::group::Running cargo audit"
          cargo audit
          echo "::endgroup::"

      # Check for outdated dependencies that might have security fixes
      - name: Check for outdated dependencies
        run: |
          echo "::group::Checking for outdated dependencies"
          cargo install cargo-outdated || true
          cargo outdated --exit-code 1 || echo "⚠️  Some dependencies are outdated - consider updating"
          echo "::endgroup::"

  # Cross-platform tests
  cross-platform:
    name: Cross-platform Tests
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: "-D warnings"

      - name: Run tests
        run: cargo test --verbose

  # Verify MSRV matches rust-toolchain.toml
  msrv-check:
    name: Verify MSRV
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Extract MSRV from rust-toolchain.toml
        id: msrv
        run: |
          MSRV=$(grep 'channel' rust-toolchain.toml | cut -d'"' -f2)
          echo "msrv=$MSRV" >> $GITHUB_OUTPUT
          echo "MSRV is: $MSRV"

      - name: Install MSRV toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ steps.msrv.outputs.msrv }}

      - name: Check with MSRV
        run: cargo check --verbose

  # Documentation build check
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Check documentation
        run: cargo doc --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"

  # All checks must pass
  ci-success:
    name: CI Success
    if: always()
    needs: [test, security, cross-platform, msrv-check, docs]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether all jobs succeeded
        uses: re-actors/alls-green@v1.2.2
        with:
          jobs: ${{ toJSON(needs) }}