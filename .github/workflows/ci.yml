name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Main test job - respects rust-toolchain.toml
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # This action properly respects rust-toolchain.toml
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          # Explicitly use minimal profile to match rust-toolchain.toml
          rustflags: "-D warnings"

      - name: Show Rust version
        run: |
          echo "Rust toolchain:"
          rustc --version
          cargo --version
          cargo fmt --version
          cargo clippy --version

      # Run exactly the same checks as make ci-local
      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Build
        run: cargo build --verbose

      - name: Build release
        run: cargo build --release --verbose

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better secret detection

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      # Scan for secrets with gitleaks
      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Install cargo-audit if not cached
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Run cargo audit
        run: cargo audit

      # Check for common security issues
      - name: Security lints
        run: |
          # Check for hardcoded credentials patterns
          ! grep -r -E "(password|secret|token|key)\s*=\s*[\"'][^\"']+[\"']" src/ --include="*.rs" || {
            echo "Found potential hardcoded credentials"
            exit 1
          }

          # Check for unsafe code
          ! grep -r "unsafe" src/ --include="*.rs" || {
            echo "Found unsafe code - please ensure it's necessary and properly documented"
          }

  # Cross-platform tests
  cross-platform:
    name: Cross-platform Tests
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: "-D warnings"

      - name: Run tests
        run: cargo test --verbose

  # Verify MSRV matches rust-toolchain.toml
  msrv-check:
    name: Verify MSRV
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract MSRV from rust-toolchain.toml
        id: msrv
        run: |
          MSRV=$(grep 'channel' rust-toolchain.toml | cut -d'"' -f2)
          echo "msrv=$MSRV" >> $GITHUB_OUTPUT
          echo "MSRV is: $MSRV"

      - name: Install MSRV toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ steps.msrv.outputs.msrv }}

      - name: Check with MSRV
        run: cargo check --verbose

  # Documentation build check
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Check documentation
        run: cargo doc --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"

  # All checks must pass
  ci-success:
    name: CI Success
    if: always()
    needs: [test, security, cross-platform, msrv-check, docs]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether all jobs succeeded
        uses: re-actors/alls-green@v1.2.2
        with:
          jobs: ${{ toJSON(needs) }}